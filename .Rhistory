#         on.exit(unlink(html_path, force = TRUE), add = TRUE)
#         render(script, output_format = html_document(), output_file = html_path)
#         paragraphs <- map_chr(html_text(html_nodes(read_html(html_path), "p")),
#                               function(x){gsub("\u2019", "'", x)})
#     }
#
#     slide_nums <- 1:length(paragraphs)
#     img_paths <- file.path(output_dir, paste0("ari_img_", slide_nums, "_",randomStrings(N=1, string_size=5), ".jpeg"))
#
#     if(capture_method == "vectorized"){
#         webshot(url = paste0(slides, "#", slide_nums), file = img_paths, ...)
#     } else {
#         for(i in slide_nums){
#             webshot(url = paste0(slides, "#", i), file = img_paths[i], ...)
#         }
#     }
#
#     on.exit(walk(img_paths, unlink, force = TRUE), add = TRUE)
#     ari_spin(img_paths, paragraphs, output, voice)
#     invisible()
# }
source('myFunction.R')
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joey", capture_method = "iterative",
output = './ML-videos/ML-module-4.mp4',
delay = 0.5
)
install.packages(c("qs", "xaringan"))
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
# new_narrate <- function(script, slides, output = "output.mp4", voice,
#                         capture_method = "vectorized", ...){
#     if(length(aws.polly::list_voices()) < 1){
#         stop("It appears you're not connected to Amazon Polly. Make sure you've",
#              "set the appropriate environmental variables before you proceed.")
#     }
#
#     if(!(capture_method %in% c("vectorized", "iterative"))) {
#         stop('capture_method must be either "vectorized" or "iterative"')
#     }
#
#     output_dir <- normalizePath(dirname(output))
#     script <- normalizePath(script)
#     if(file.exists(slides)){
#         print(slides)
#         #slides <- normalizePath(slides)
#         #print(slides)
#         ## webshot, if webshot webshot:::is_windows(),
#         ## call webshot:::fix_windows_url() which append his version of
#         ## "file:///"..., hence if this part run on window it brake the procedure.
#         #
#         if (.Platform$OS.type == "windows"){
#
#             ## slash was missing
#             #
#             slides <- paste0("file://localhost/", slides)
#             print(slides)
#         }
#     }
#     stopifnot(
#         file.exists(script),
#         dir.exists(output_dir)
#     )
#
#     if(file_ext(script) %in% c("Rmd", "rmd")){
#         paragraphs <- parse_html_comments(script)
#     } else {
#         html_path <- file.path(output_dir, paste0("ari_script_",randomStrings(N=1, string_size=5), ".html"))
#         on.exit(unlink(html_path, force = TRUE), add = TRUE)
#         render(script, output_format = html_document(), output_file = html_path)
#         paragraphs <- map_chr(html_text(html_nodes(read_html(html_path), "p")),
#                               function(x){gsub("\u2019", "'", x)})
#     }
#
#     slide_nums <- 1:length(paragraphs)
#     img_paths <- file.path(output_dir, paste0("ari_img_", slide_nums, "_",randomStrings(N=1, string_size=5), ".jpeg"))
#
#     if(capture_method == "vectorized"){
#         webshot(url = paste0(slides, "#", slide_nums), file = img_paths, ...)
#     } else {
#         for(i in slide_nums){
#             webshot(url = paste0(slides, "#", i), file = img_paths[i], ...)
#         }
#     }
#
#     on.exit(walk(img_paths, unlink, force = TRUE), add = TRUE)
#     ari_spin(img_paths, paragraphs, output, voice)
#     invisible()
# }
source('myFunction.R')
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joey", capture_method = "iterative",
output = './ML-videos/ML-module-4.mp4',
delay = 0.5
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joey", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
list_voices()
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
source('spin.R')
new_narrate <- function(script, slides, output = "output.mp4", voice,
capture_method = "vectorized", ...){
if(length(aws.polly::list_voices()) < 1){
stop("It appears you're not connected to Amazon Polly. Make sure you've",
"set the appropriate environmental variables before you proceed.")
}
if(!(capture_method %in% c("vectorized", "iterative"))) {
stop('capture_method must be either "vectorized" or "iterative"')
}
output_dir <- normalizePath(dirname(output))
script <- normalizePath(script)
if(file.exists(slides)){
print(slides)
#slides <- normalizePath(slides)
#print(slides)
## webshot, if webshot webshot:::is_windows(),
## call webshot:::fix_windows_url() which append his version of
## "file:///"..., hence if this part run on window it brake the procedure.
#
if (.Platform$OS.type == "windows"){
## slash was missing
#
slides <- paste0("file://localhost/", slides)
print(slides)
}
}
stopifnot(
file.exists(script),
dir.exists(output_dir)
)
if(file_ext(script) %in% c("Rmd", "rmd")){
paragraphs <- parse_html_comments(script)
} else {
html_path <- file.path(output_dir, paste0("ari_script_",randomStrings(N=1, string_size=5), ".html"))
on.exit(unlink(html_path, force = TRUE), add = TRUE)
render(script, output_format = html_document(), output_file = html_path)
paragraphs <- map_chr(html_text(html_nodes(read_html(html_path), "p")),
function(x){gsub("\u2019", "'", x)})
}
slide_nums <- 1:length(paragraphs)
img_paths <- file.path(output_dir, paste0("ari_img_", slide_nums, "_",randomStrings(N=1, string_size=5), ".jpeg"))
if(capture_method == "vectorized"){
webshot(url = paste0(slides, "#", slide_nums), file = img_paths, ...)
} else {
for(i in slide_nums){
webshot(url = paste0(slides, "#", i), file = img_paths[i], ...)
}
}
on.exit(walk(img_paths, unlink, force = TRUE), add = TRUE)
new_spin(img_paths, paragraphs, output, voice)
invisible()
}
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
#     } else {
#         for(i in slide_nums){
#             webshot(url = paste0(slides, "#", i), file = img_paths[i], ...)
#         }
#     }
#
#     on.exit(walk(img_paths, unlink, force = TRUE), add = TRUE)
#     ari_spin(img_paths, paragraphs, output, voice)
#     invisible()
# }
source('myFunction.R')
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
new_spin <- function(images, paragraphs, output = "output.mp4", voice){
if(length(list_voices()) < 1){
stop("It appears you're not connected to Amazon Polly. Make sure you've ",
"set the appropriate environmental variables before you proceed.")
}
stopifnot(length(images) > 0)
images <- normalizePath(images)
output_dir <- normalizePath(dirname(output))
stopifnot(
length(paragraphs) > 0,
identical(length(images), length(paragraphs)),
all(file.exists(images)),
dir.exists(output_dir)
)
wavs <- list()
par_along <- 1:length(paragraphs)
ideal_duration <- rep(NA, length(paragraphs))
pb <- progress_bar$new(format = "Fetching Narration [:bar] :percent", total = length(par_along))
for(i in par_along){
if(nchar(paragraphs[i]) < 1500){
wav <- synthesize(paragraphs[i], voice)
} else {
chunks <- split_up_text(paragraphs[i])
wav <- reduce(map(chunks, synthesize, voice = voice), bind)
}
ideal_duration[i] <- ceiling(length(wav@left) / wav@samp.rate)
end_wav <- Wave(rep(0, wav@samp.rate * ideal_duration[i] - length(wav@left)),
bit = wav@bit, samp.rate = wav@samp.rate)
wavs[[i]] <- bind(wav, end_wav)
pb$tick()
}
ari_stitch(images, wavs, output)
}
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
source('myFunction.R')
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ari_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4',
delay = 0.5
)
library(aws.polly)
list_modify()
list_voices()
install.packages("purrr")
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "vectorized",
output = 'output.mp4'
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/R-ML/ML-module-1.md",
slides = "C:/Users/Dell/Documents/BEProject/R-ML/ML-module-1.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/ujas_intro_script.md",
slides = "C:/Users/Dell/Documents/BEProject/ujas_intro.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/R/python-module-1.md",
slides = "C:/Users/Dell/Documents/BEProject/R/python-module-1.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/R/python-module-1.md",
slides = "C:/Users/Dell/Documents/BEProject/R/python-module-1.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/R/python-module-1.md",
slides = "C:/Users/Dell/Documents/BEProject/R/python-module-1.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/R/python-module-1.md",
slides = "C:/Users/Dell/Documents/BEProject/R/python-module-1.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
library(ari)
library(aws.polly)
library(tuneR)
library(webshot)
library(tools)
library(text2speech)
library(purrr)
library(xml2)
library(rvest)
library(progress)
library(hms)
library(testthat)
library(xaringan)
library(qs)
library(rmarkdown)
source('myFunction.R')
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAUFSLL5UPSLQPTW4N",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
Sys.setenv("ffmpeg" = "E:/ffmpeg/bin/ffmpeg.exe")
new_narrate(
script = "C:/Users/Dell/Documents/BEProject/R/python-module-1.md",
slides = "C:/Users/Dell/Documents/BEProject/R/python-module-1.html",
voice = "Joanna", capture_method = "iterative",
output = 'output.mp4'
)
